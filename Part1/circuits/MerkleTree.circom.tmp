pragma circom 2.0.0;

include "../node_modules/circomlib/circuits/poseidon.circom";

template CheckRoot(n) { // compute the root of a MerkleTree of n Levels 
    signal input leaves[2**n];
    signal output root;

    var numberofleaves = 2**n;
    var numofhashes = 2*2**n-1;
    var merkletree[numofhashes*2];

    log(numofhashes);    //15
    log(numberofleaves); //8

    component poseidon[numofhashes*2];

    var i;

    // Hashes of leaves
    for (i=0; i<numberofleaves; i++) {
        poseidon[i] = Poseidon(1);
        poseidon[i].inputs[0] <== leaves[i];
        merkletree[i] = poseidon[i].out;
    }

    for(var j=0; j < numberofleaves; j++) {
        log(merkletree[j]);
    }
    log(i);

    for(var j=0; j < (numofhashes-numberofleaves)*2; j+=2) {
        poseidon[i] = Poseidon(2);
        log(merkletree[j]);
        log(merkletree[j+1]);
        poseidon[i].inputs[0] <== merkletree[j];
        poseidon[i].inputs[1] <== merkletree[j+1];
        merkletree[i] = poseidon[i].out;
        log(merkletree[i]);
        i++;
        log(j); log(i);
        } 

    for(var j=0; j < numofhashes; j++) {
        log(merkletree[j]);
    }
    root <== merkletree[numofhashes-1];
}

template MerkleTreeInclusionProof(n) {
    signal input leaf;
    signal input path_elements[n];
    signal input path_index[n]; // path index are 0's and 1's indicating whether the current element is on the left or right
    signal output root; // note that this is an OUTPUT signal

    //[assignment] insert your code here to compute the root from a leaf and elements along the path
}